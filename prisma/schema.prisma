// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model todo {
  id   Int     @id
  text String
  done Boolean @default(false)
}

model User {
  id           String    @id
  age          Int?
  username     String    @unique
  firstName    String?
  lastName     String?
  passwordHash String
  sessions     Session[]
  jobs         Job[]
  notes        Note[]
  projects     Project[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @default(now())
}

model Job {
  id             Int      @id @default(autoincrement())
  title          String
  company        String?
  salary         String?
  url            String?
  status         String?  @default("applied")
  jobDescription String?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  notes          Note[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String?
  message   String
  jobId     Int?
  job       Job?     @relation(fields: [jobId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id           Int      @id @default(autoincrement())
  title        String
  url          String?
  company      String?
  date         String?
  description  String?
  contribution String?
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model NewsletterContacts {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
